Существуют два основных вида памяти: статическая и динамическая. Статическая память освобождается сама собой, когда программа завершвет свою работу.
За освобождение динамической памяти отвечает программист. Для этого существуют ва ключевых слова- new и delete. Использование new без delete является грубой ошибкой.
Рассмотрим следующий пример: 
ghjklkjhgvcvbnjkjhv
class Dog{
    std::string breed
    std::string name;
    int age;
    Dog(std::string bread, std::string name, int age): bread(bread), name(name), age(age) {};
};

class Family{
public:

   Family( std::string mother_name, std::string father_name, std::string child_name, std::string bread, std::string name, int age):mother_name(mother_name),
   father_name(father_name) , child_name(child_name){
        Dog *dog=new Dog(bread, name, age);
   }
   ~Family(){
        delete dog;
   };
privat:
   std::string mother_name;
   std::string father_name;
   std::string child_name;
   Dog *dog;
};

int main(){
    std::string mother_name_;
    std::string father_name_;
    std::string child_name_;
    std::string bread_;
    std::string name_;
    int age_;

    Family family( mother_name, father_name, child_name, bread, name, age);
}
В данном примере создаётся класс Family, содержащий поле типа Dog. Конструктор класса Family создаёт динамический объект dog.
Когда экземпляр класса family уходит из зоны видимости программы, деструктор ~Family() автоматически удаляет объект dog. 
Деструкторы бывают необходимы для освобождения динамической памяти. Их особенно удобно использовать, если создаётсся несколько экзепляров классов, 
в которых для полей выделена именно динамическая память. В этом случае программисту не придётся следить за удалением каждого из объектов. 
Деструктор сделает это автоматически.
