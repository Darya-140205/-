Лямбда выражение - это удобный способ для определения анонимной функции, который позволяет использовать функцию на месте без явного объявления функции с именем. Лямбда- выражения полезны,
когда необходимо прередать небольшой кусок кода как аргумент в функцию.
Синтаксис:
лямбда-выражения могут принимать аргументы в следующем формате:

[захват](аргументы) -> возвращаемый_тип {
    // Тело лямбда-функции
    // Может использовать аргументы и переменные из окружающей области видимости
    return результат;
}

- [захват] - это список переменных из окружающей области видимости, которые лямбда-функция может захватить. Захваченные переменные могут быть доступны внутри лямбда-функции.
- (аргументы) - это список аргументов, которые лямбда-функция принимает, аналогично параметрам функции.
- -> возвращаемый_тип - опциональная часть, которая указывает тип данных, возвращаемый лямбда-функцией.
- {} - тело лямбда-функции, где вы можете выполнять операции и возвращать результат.

пример:
auto fun [](std::string str1,std::string str2 ) ->std::string{
return str1+" "+str2;
} 
std::string result("Hello", "World");

Как уже было сказано, лямбда-выражение можно передавать в функции. Приведу пример кода:

void print (std::function<viod()> lambda) {
     lambda();
}

int main(){

   print([]() {
      std::cout<<"Hello world";
   });
}
Пример 2:

int multiplication(std::function <int(int,int)>lambda ){
    int a=3, b=8;
    int mult=lambda(3,8);
    return mult;
}

int main(){

multiplication([](a,b){
    return a+b;
});

}
