задача 1:
Кролик сидит на нулевой ступеньке большой лестницы. Он может прыгать на одну или более ступенек вверх, 
но не далее чем на k. Кролик хочет допрыгать до n-й ступеньки, но может сделать это большим количеством способов. 
Напишите рекурсивную функцию, которая принимает число n типа int и число k — максимальную длину прыжка, а возвращает
количество способов, которым кролик может доскакать до n-й ступеньки. В функции для аргумента “максимальная длина
прыжка” задать значение, по умолчанию равное 3.

#include <iostream>

int count_of_ways(int n, int k =3 ) {

    if (n == 0 || n ==1) {
        return 1;

    } else if (n < 0) {
        return 0;

    } else {
        int result = 0;

    for (int i = 1; i <= k; i++)
        result += count_of_ways(n-i,k);

    return result;

    }

}


int main()   {

    int n;
    std::cout<<"Input number of steps: ";
    std::cin>>n;
    int k;
    std::cout<<"Enter the maximum jump length: ";
    std::cin>>k;
    int count_of_ways_result = count_of_ways (n,k);
    std::cout<<"Number of ways to reach the step with the number "<<n<<" equals "<<count_of_ways_result ;
    return 0;
}


ЗАДАНИЕ 2:
Напишите рекурсивную функцию, которая принимает большое число n типа long long и переменную ans, а возвращает void.
После завершения работы функции в переменной ans должно оказаться количество чётных цифр в записи числа n. 

#include <iostream>
# include <vector>

int new_number (int n) {
	return (n/10);
}


void evendigits( long long n, int ans ){
	
	std::string str=std::to_string(n);
	std::vector< long long > vec(str.length());
	int i=0;
    
	while (n!=0) {
		vec[i]=n%10;
		n=new_number(n);
		++i;
	}

	for (int j=0; j<vec.size();++j) {
		if (vec[j] % 2 ==0)  ++ans;	
	}
	
	std::cout<<"The number of even digits in a number: "<<ans;
}


int main()   {
	
	long long n;
	int ans=0;

	std::cout<<"input number:\n";
	std::cin>>n;
	evendigits(n, ans) ;
}
